package {{if .ServicePackage}}{{ToLower .ServicePackage}}{{else}}{{ToLower .ProviderName}}{{end}}{{if .Typed}}

import (
    "context"
    "time"

    "github.com/terraform-providers/terraform-provider-{{- ToLower .ProviderName -}}/{{- ToLower .ProviderName -}}/internal/sdk"
    "github.com/terraform-providers/terraform-provider-{{- ToLower .ProviderName -}}/{{- ToLower .ProviderName -}}/internal/tf/pluginsdk"
)

type {{ToCamel .Name}}DataSource struct{}
{{if not .UseResourceModel}}
type {{ToCamel .Name}}Model struct {
    // TODO - Schema in Go Types format here
}
{{end}}
var _ sdk.DataSource = {{ToCamel .Name}}DataSource{}

func (r {{ToCamel .Name}}DataSource) ModelObject() interface{} {
    return {{ToCamel .Name}}Model{}
}

func (r {{ToCamel .Name}}DataSource) ResourceType() string {
    return "{{- TfName .ProviderName .Name -}}"
}

func (r {{ToCamel .Name}}DataSource) Arguments() map[string]*pluginsdk.Schema {
    return map[string]*pluginsdk.Schema{
        /*
        TODO - This sections is for properties used to look up the desired resource for this data source,
        `Required: true` items first, followed by`Optional: true`, both in alphabetical order
        */
    }
}

func (r {{ToCamel .Name}}DataSource) Attributes() map[string]*pluginsdk.Schema {
    return map[string]*pluginsdk.Schema{
        /*
        TODO - This section is for `Computed: true` only items, i.e. useful values that are returned by the resource
        that can be used as outputs or passed programmatically to other resources or data sources.
        */
    }
}

func (r {{ToCamel .Name}}DataSource) Read() sdk.ResourceFunc {
    return sdk.ResourceFunc{
        Timeout: 5 * time.Minute,
        Func: func(ctx context.Context, metadata sdk.ResourceMetaData) error {
            // TODO - Read Func
            return nil
        },
    }
}{{else}}

import (
    "time"

    "github.com/terraform-providers/terraform-provider-{{- ToLower .ProviderName -}}/{{- ToLower .ProviderName -}}/internal/tf/pluginsdk"
    )

func dataSource{{ToCamel .Name}}() *pluginsdk.Resource {
    return &pluginsdk.Resource{
        Read: dataSource{{ToCamel .Name}}Read,

        Timeouts: &pluginsdk.ResourceTimeout{
            Read: pluginsdk.DefaultTimeout(5 * time.Minute),
        },

        Schema: map[string]*pluginsdk.Schema{
            /*
            TODO - This sections is for properties used to look up the desired resource for this data source,
            `Required: true` items first, followed by`Optional: true`, both in alphabetical order, finally
            `Computed: true` only items for properties of the data source to be made available to the user
            */
        },
    }
}

func dataSource{{ToCamel .Name}}Read (d *pluginsdk.ResourceData, meta interface{}) error {
    // TODO - Implement Data Source Read
    return nil
}
{{end}}
